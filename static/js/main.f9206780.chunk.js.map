{"version":3,"sources":["components/landingpage.js","components/about.js","components/contact.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","src","alt","Component","About","Contact","Main","exact","path","component","LandingPage","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNA8BeA,E,uKAtBX,OACE,yBAAKC,MAAS,CAACC,MAAO,OAAQC,OAAQ,SACtC,kBAAC,OAAD,CAAMC,UAAY,gBAChB,kBAAC,OAAD,CAAMC,IAAK,IACX,yBACEC,IAAM,gEACNC,IAAM,UACNH,UAAY,aAEd,yBAAKA,UAAU,eACb,wDAEA,qG,GAhBYI,aCUPC,E,uKANX,OACE,iCAAM,4CAAN,S,GALcD,aCULE,E,uKANX,OACE,iCAAM,8CAAN,S,GALgBF,aCYPG,EATF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYC,IAClC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAYL,IACjC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAYJ,M,QC6BxBM,E,uKA9BX,OAEE,yBAAKZ,UAAU,oBACjB,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAea,MAAM,yBAAyBC,QAAM,GAClE,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQF,MAAM,cACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,UAAD,KACI,yBAAKf,UAAU,iBAEf,kBAAC,EAAD,a,GAvBMI,aCKEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCPNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f9206780.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Grid, Cell} from 'react-mdl';\r\n\r\n\r\nclass Landing extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div style = {{width: '100%', margin: 'auto'}}>\r\n      <Grid className = \"landing-grid\">\r\n        <Cell col={12}>\r\n        <img\r\n          src = \"https://s3-prod.chicagobusiness.com/GettyImages-525625855.jpg\"\r\n          alt = \"skyline\"\r\n          className = \"city-img\"\r\n          />\r\n        <div className=\"banner-text\">\r\n          <h1> Black Owned Businesses </h1>\r\n\r\n          <p> A community compiled directory of black businesses in Chicago</p>\r\n        </div>\r\n\r\n        </Cell>\r\n      </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass About extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div> <h1> About Page </h1> </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div> <h1> Contact Page </h1> </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from \"./landingpage\";\r\nimport About from \"./about\";\r\nimport Contact from \"./contact\";\r\n\r\nconst Main = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component ={LandingPage} />\r\n    <Route path=\"/about\" component ={About} />\r\n    <Route path=\"/contact\" component ={Contact} />\r\n\r\n  </Switch>\r\n)\r\n\r\nexport default Main;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\n\nimport Main from \"./components/main\";\nimport {Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n\n    return (\n\n      <div className=\"demo-big-content\">\n    <Layout>\n        <Header className=\"header-color\" title=\"Black Owned Businesses\" scroll>\n            <Navigation>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        <Drawer title=\"Navigation\">\n            <Navigation>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n    )\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}